{
  "_args": [
    [
      "tree-watcher",
      "/home/roy/Code/project/Test"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "tree-watcher@latest",
  "_id": "tree-watcher@0.2.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/tree-watcher",
  "_nodeVersion": "v0.6.6",
  "_npmUser": {
    "email": "daan@daandeschepper.nl",
    "name": "daanlib"
  },
  "_npmVersion": "1.1.0-beta-4",
  "_phantomChildren": {},
  "_requested": {
    "name": "tree-watcher",
    "raw": "tree-watcher",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/tree-watcher/-/tree-watcher-0.2.2.tgz",
  "_shasum": "0718d58f069061a4f6c7dff15b80f2cab461a148",
  "_shrinkwrap": null,
  "_spec": "tree-watcher",
  "_where": "/home/roy/Code/project/Test",
  "author": {
    "email": "daan@daandeschepper.nl",
    "name": "Daan de Schepper"
  },
  "bugs": {
    "url": "https://github.com/daanlib/tree-watcher/issues"
  },
  "dependencies": {},
  "description": "Recursive file tree watcher",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "0718d58f069061a4f6c7dff15b80f2cab461a148",
    "tarball": "https://registry.npmjs.org/tree-watcher/-/tree-watcher-0.2.2.tgz"
  },
  "engines": {
    "node": ">= 0.6.5"
  },
  "homepage": "https://github.com/daanlib/tree-watcher",
  "main": "tree-watcher",
  "maintainers": [
    {
      "name": "daanlib",
      "email": "daan@daandeschepper.nl"
    }
  ],
  "name": "tree-watcher",
  "optionalDependencies": {},
  "readme": "Tree-watcher is a tool for monitoring changes in an entire file tree.\r\n\r\nThe standard ``fs.watch(dir, callback)`` only watches for changes in a single directory. Tree-watcher can watch an unlimited amount of directories for changes.\r\n\r\nFeatures include\r\n\r\n-   Watching subdirs as they are created (so no need to manually add watchers to newly created subdirs of a dir that is already watched)\r\n-   Getting the full path of a changed file as a parameter to the `change`` event handler\r\n-   Adding event handlers at any time (``require(\"tree-watcher\").Watcher`` is an EventEmitter)\r\n-   Throttling change events (tree-watchers keeps track of the event/path combinations that get fired and adds the possibility to throttle these, to prevent a large number of the events firing for a single change)\r\n-   filter out directory names that dont need to be watched (by adding a filter function)\r\n\r\nUSAGE\r\n-----\r\n\r\n    var watcher = require(\"./treewatcher\");\r\n    \r\n    watcher = new watcher.Watcher({\r\n        //filter function return true to allow filename, false to disallow\r\n        //gets the filename, not the full path\r\n        //the default is a function that always returns true\r\n        filter: function(filename) {\r\n            return filename.charAt(0) !== \".\";\r\n        },\r\n        //set to 0 to prevent throttling\r\n        throttle: 50\r\n    });\r\n    \r\n    //the Watcher EventEmitter only emits change events, but the event type fired by fs.watch is passed as the first parameter\r\n    //you can alse choose to add the listener inside of the callback for Watcher.watch, to make sure no events are fired before every dir is watched\r\n    watcher.on(\"change\", function(event, path, watcher) {\r\n        console.log(\"something has changed\");\r\n    });\r\n    \r\n    //the callback is fired when all the (sub)directories are being watched\r\n    watcher.watch(\"i:\\\\\", function(err, watcher) {\r\n        if(err) {\r\n            console.log(\"ERROR: \" + err);\r\n        } else {\r\n            console.log(\"DONE\");\r\n        }\r\n    });",
  "repository": {
    "type": "git",
    "url": "git://github.com/daanlib/tree-watcher.git"
  },
  "tags": [
    "fs",
    "watch"
  ],
  "version": "0.2.2"
}
